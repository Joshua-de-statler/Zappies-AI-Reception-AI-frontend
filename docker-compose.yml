# docker-compose.yml - Production Multi-Service Architecture
version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: zappies_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - websocket
    networks:
      - zappies_network
    restart: always

  # Main API Service (Multiple Instances)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - zappies_network
    restart: always

  # WebSocket Service
  websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    environment:
      - REDIS_URL=redis://redis:6379/1
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "5001:5001"
    deploy:
      replicas: 2
    depends_on:
      - redis
      - postgres
    networks:
      - zappies_network
    restart: always

  # Background Worker Service
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    deploy:
      replicas: 2
    depends_on:
      - redis
      - rabbitmq
      - postgres
    networks:
      - zappies_network
    restart: always

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.worker
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - redis
      - rabbitmq
    networks:
      - zappies_network
    restart: always

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zappies_postgres
    environment:
      - POSTGRES_DB=zappies
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - zappies_network
    restart: always

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zappies_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - zappies_network
    restart: always

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: zappies_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - zappies_network
    restart: always

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: zappies_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - zappies_network
    restart: always

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: zappies_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - zappies_network
    restart: always

  # Log Aggregation - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: zappies_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - zappies_network
    restart: always

  # Log Aggregation - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: zappies_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - zappies_network
    restart: always

networks:
  zappies_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data: